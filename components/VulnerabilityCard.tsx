// version 0.0.44
import React, { useState } from 'react';
import { Vulnerability, XssPayloadResult, SqlmapCommandResult } from '../types.ts';
import { Severity } from '../types.ts';
import { SEVERITY_STYLES } from '../constants.ts';
import { generateXssPayload, generateSqlmapCommand } from '../services/Service.ts';
import { useApiOptions } from '../hooks/useApiOptions.ts';
import { Spinner } from './Spinner.tsx';
import { ShieldExclamationIcon, CommandLineIcon, FireIcon, BeakerIcon, ChevronDownIcon, ChevronUpIcon, ChatIcon, PuzzlePieceIcon, KeyIcon } from './Icons.tsx';
import { XssPayloadTester } from './XssPayloadTester.tsx';
import { MarkdownRenderer } from './MarkdownRenderer.tsx';

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  analyzedTarget: string;
  onSendToPayloadForge?: (payload: string) => void;
  onSendToJwtAnalyzer?: (token: string) => void;
  onShowExploitAssistant?: () => void;
  onShowSqlExploitAssistant?: () => void;
  onAnalyzeWithAgent?: () => void;
  onShowApiKeyWarning?: () => void; // Added for completeness, though actions here have checks
}

export const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({ vulnerability, analyzedTarget, onSendToPayloadForge, onSendToJwtAnalyzer, onShowExploitAssistant, onShowSqlExploitAssistant, onAnalyzeWithAgent, onShowApiKeyWarning }) => {
  const severityStyle = SEVERITY_STYLES[vulnerability.severity] || SEVERITY_STYLES[Severity.UNKNOWN];
  const { apiOptions, isApiKeySet } = useApiOptions();
  
  const [isGenerating, setIsGenerating] = useState<string | null>(null); // 'xss', 'sql'
  const [generatedXssResult, setGeneratedXssResult] = useState<XssPayloadResult | null>(null);
  const [generatedSqlCommand, setGeneratedSqlCommand] = useState<SqlmapCommandResult | null>(null);
  const [generationError, setGenerationError] = useState<string | null>(null);
  const [isRecommendationOpen, setIsRecommendationOpen] = useState(false);
  
  // FIX: Ensure vulnerableCode is always a string to prevent runtime errors.
  const vulnerableCode = typeof vulnerability.vulnerableCode === 'string' ? vulnerability.vulnerableCode : '';
  
  const handleGeneratePayload = async () => {
    if (!isApiKeySet && onShowApiKeyWarning) {
        onShowApiKeyWarning();
        return;
    }
    setGenerationError(null);
    setIsGenerating('xss');
    setGeneratedXssResult(null);
    setGeneratedSqlCommand(null);
    
    try {
      const response = await fetch('/payloads/xsspayloads.txt');
      if (!response.ok) {
        console.warn('Could not load xsspayloads.txt, proceeding with standard generation.');
      }
      const text = response.ok ? await response.text() : '';
      const allPayloads = text.split('\n').filter(p => p.trim() !== '' && !p.startsWith('#'));
      
      const sampleSize = 50;
      const sampledPayloads = allPayloads.length > sampleSize 
        ? allPayloads.sort(() => 0.5 - Math.random()).slice(0, sampleSize)
        : allPayloads;

      const result = await generateXssPayload(vulnerability, apiOptions!, sampledPayloads);
      setGeneratedXssResult(result);
    } catch(e: any) {
        setGenerationError(e.message || "An unknown error occurred during payload generation.");
    } finally {
        setIsGenerating(null);
    }
  };

  const handleGenerateSqlCommand = async () => {
    if (!isApiKeySet && onShowApiKeyWarning) {
        onShowApiKeyWarning();
        return;
    }
    setGenerationError(null);
    setIsGenerating('sql');
    setGeneratedXssResult(null);
    setGeneratedSqlCommand(null);

    try {
        const result = await generateSqlmapCommand(vulnerability, analyzedTarget, apiOptions!);
        setGeneratedSqlCommand(result);
    } catch(e: any) {
        setGenerationError(e.message || "An unknown error occurred during command generation.");
    } finally {
        setIsGenerating(null);
    }
  };

  const handleCopyCommand = () => {
    if (generatedSqlCommand?.command) {
        navigator.clipboard.writeText(generatedSqlCommand.command);
    }
  };
  
  const vulnName = (vulnerability.vulnerability || '').toLowerCase();
  const isXss = vulnName.includes('xss') || vulnName.includes('cross-site scripting');
  const isSqli = vulnName.includes('sql');
  const isJwt = vulnName.includes('jwt') || (vulnerableCode && vulnerableCode.startsWith('ey'));
  
  const forgeableKeywords = [
    'xss',
    'cross-site scripting',
    'command injection',
    'template injection',
    'ssti',
    'lfi',
    'path traversal',
    'file inclusion',
  ];
  const isForgeable = forgeableKeywords.some(keyword => vulnName.includes(keyword));

  return (
    <div className={`bg-control-bg/50 border ${severityStyle.border} rounded-xl overflow-hidden shadow-lg animate-fade-in`}>
      <header className={`p-4 flex justify-between items-start gap-4 ${severityStyle.headerBg}`}>
        <div className="flex-grow">
          <h4 className={`text-lg font-bold ${severityStyle.text}`}>{vulnerability.vulnerability || 'Unnamed Finding'}</h4>
          <p className={`text-xs ${severityStyle.text} opacity-80 font-mono break-all`}>{analyzedTarget}</p>
        </div>
        <div className={`flex-shrink-0 px-3 py-1 text-sm font-bold rounded-full border-2 ${severityStyle.border} ${severityStyle.text}`}>
          {vulnerability.severity}
        </div>
      </header>

      <div className="p-4 space-y-4">
        <div>
          <h5 className="font-semibold text-text-primary mb-1">Description</h5>
          <div><MarkdownRenderer content={vulnerability.description} /></div>
        </div>

        <div>
          <h5 className="font-semibold text-text-primary mb-1">Impact</h5>
          <p className="text-sm text-text-secondary">{vulnerability.impact}</p>
        </div>

        {vulnerableCode && (
          <div>
            <h5 className="font-semibold text-text-primary mb-1">Payload / Vulnerable Pattern</h5>
            <pre className="w-full bg-black/30 border border-purple-800/50 rounded-lg p-3 text-purple-200 text-sm overflow-x-auto"><code>{vulnerableCode}</code></pre>
          </div>
        )}

         <div>
            <button 
                onClick={() => setIsRecommendationOpen(!isRecommendationOpen)}
                className="w-full flex justify-between items-center text-left font-semibold text-text-primary py-2"
            >
                Recommendation
                {isRecommendationOpen ? <ChevronUpIcon className="h-5 w-5"/> : <ChevronDownIcon className="h-5 w-5"/>}
            </button>
            {isRecommendationOpen && (
                <div className="text-sm text-text-secondary border-t border-glass-border pt-2">
                    <MarkdownRenderer content={vulnerability.recommendation} />
                </div>
            )}
        </div>

        {(generatedXssResult || generatedSqlCommand || generationError) && (
          <div className="border-t border-glass-border pt-4">
            {generationError && <div className="p-2 mb-2 text-xs bg-red-900/50 border border-red-700 text-red-200 rounded-lg font-mono">{generationError}</div>}
            {generatedXssResult && (
              <div className="space-y-4">
                <h6 className="font-semibold text-cyan-300">{generatedXssResult.explanation}</h6>
                {generatedXssResult.payloads.map((p, i) => (
                  <div key={i} className="pl-4 border-l-2 border-cyan-500/30">
                    <p className="font-bold text-sm text-text-primary">{p.description}</p>
                    <p className="text-xs text-text-tertiary mb-1">{p.mechanism}</p>
                    {vulnerability.injectionPoint && analyzedTarget.startsWith('http') ? (
                      <XssPayloadTester 
                        payload={p.payload} 
                        analyzedTarget={analyzedTarget} 
                        injectionPoint={vulnerability.injectionPoint}
                        onSendToPayloadForge={onSendToPayloadForge}
                      />
                    ) : (
                      <div className="space-y-2">
                        <pre className="w-full bg-black/30 border border-purple-800/50 rounded-lg p-3 text-purple-200 text-sm overflow-x-auto">
                          <code>{p.payload}</code>
                        </pre>
                        <div className="flex items-start flex-wrap gap-2">
                          {onSendToPayloadForge && (
                              <button
                                  onClick={() => onSendToPayloadForge(p.payload)}
                                  className="flex-shrink-0 flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-orange-200 bg-orange-900/40 border border-orange-700/80 rounded-lg hover:bg-orange-900/60 transition-colors"
                                  title="Send this generated payload to the Payload Forge."
                              >
                                  <FireIcon className="h-4 w-4" />
                                  Send to Forge
                              </button>
                          )}
                          <div className='pt-0.5 text-xs text-text-tertiary basis-full'>
                            Send this payload to the Forge for further obfuscation experiments.
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
            {generatedSqlCommand && (
              <div className="space-y-2">
                 <h6 className="font-semibold text-cyan-300">Generated SQLMap Command</h6>
                 <p className="text-sm text-text-secondary">{generatedSqlCommand.explanation}</p>
                 <div className="relative group">
                    <pre className="w-full bg-black/30 border border-purple-800/50 rounded-lg p-3 text-purple-200 text-sm overflow-x-auto">
                        <code>{generatedSqlCommand.command}</code>
                    </pre>
                    <button onClick={handleCopyCommand} className="absolute top-2 right-2 p-1 rounded-md bg-purple-900/50 hover:bg-purple-900/80 text-purple-200 opacity-0 group-hover:opacity-100 transition-opacity">Copy</button>
                 </div>
              </div>
            )}
          </div>
        )}
      </div>
      
      <footer className="p-4 bg-black/20 flex flex-wrap items-center gap-2">
        {isXss && onShowExploitAssistant && (
            <button onClick={onShowExploitAssistant} className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-purple-200 bg-purple-900/40 border border-purple-700/80 rounded-lg hover:bg-purple-900/60 transition-colors">
                <BeakerIcon className="h-4 w-4" /> Analyze Exploit Path
            </button>
        )}
        {isSqli && onShowSqlExploitAssistant && vulnerability.injectionPoint && (
             <button onClick={onShowSqlExploitAssistant} className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-purple-200 bg-purple-900/40 border border-purple-700/80 rounded-lg hover:bg-purple-900/60 transition-colors">
                <BeakerIcon className="h-4 w-4" /> Analyze Exploit Path
            </button>
        )}
        {isXss && (
            <button onClick={handleGeneratePayload} disabled={isGenerating === 'xss'} className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-cyan-200 bg-cyan-900/40 border border-cyan-700/80 rounded-lg hover:bg-cyan-900/60 transition-colors">
                {isGenerating === 'xss' ? <Spinner /> : <FireIcon className="h-4 w-4" />} Generate XSS Payloads
            </button>
        )}
        {onSendToPayloadForge && vulnerableCode && isForgeable && (
            <button onClick={() => onSendToPayloadForge(vulnerableCode)} className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-orange-200 bg-orange-900/40 border border-orange-700/80 rounded-lg hover:bg-orange-900/60 transition-colors" title="Send the vulnerable pattern to Payload Forge">
                <FireIcon className="h-4 w-4" /> Send Pattern to Forge
            </button>
        )}
        {isSqli && vulnerability.injectionPoint && (
            <button onClick={handleGenerateSqlCommand} disabled={isGenerating === 'sql'} className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-orange-200 bg-orange-900/40 border border-orange-700/80 rounded-lg hover:bg-orange-900/60 transition-colors">
                {isGenerating === 'sql' ? <Spinner /> : <CommandLineIcon className="h-4 w-4" />} Generate SQLMap Command
            </button>
        )}
        {onAnalyzeWithAgent && (
            <button onClick={onAnalyzeWithAgent} className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-gray-300 bg-gray-700/40 border border-gray-600/80 rounded-lg hover:bg-gray-700/60 transition-colors">
                <ChatIcon className="h-4 w-4" /> Analyze with Agent
            </button>
        )}
        {isJwt && onSendToJwtAnalyzer && (
             <button onClick={() => onSendToJwtAnalyzer(vulnerableCode)} className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold text-yellow-200 bg-yellow-900/40 border border-yellow-700/80 rounded-lg hover:bg-yellow-900/60 transition-colors">
                <KeyIcon className="h-4 w-4" /> Send to JWT Analyzer
            </button>
        )}
      </footer>
    </div>
  );
}